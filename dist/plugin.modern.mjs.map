{"version":3,"file":"plugin.modern.mjs","sources":["../src/strategies.ts","../src/index.ts"],"sourcesContent":["import { type CSSRuleSelectorTransformer } from './index';\r\n\r\ninterface Options {\r\n  ignore?: string[];\r\n  remove?: string[];\r\n}\r\n\r\ntype SelectorBasedStrategy<ExtraOptions = unknown> = (\r\n  selectors: string | string[],\r\n  options?: Options & ExtraOptions,\r\n) => CSSRuleSelectorTransformer;\r\n\r\nconst optionsHandlerForIgnoreAndRemove = (\r\n  selector: string,\r\n  { ignore, remove }: Options = {},\r\n): string | null => {\r\n  if (remove?.some((s) => selector.includes(s)) === true) {\r\n    return '';\r\n  }\r\n  if (ignore?.some((s) => selector.includes(s)) === true) {\r\n    return selector;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst roots = new Set([\r\n  'html',\r\n  'body',\r\n  ':host',\r\n]);\r\nfunction isRootSelector(selector: string) {\r\n  return roots.has(selector);\r\n}\r\n\r\nfunction isBeforeOrAfter(ruleSelector: string) {\r\n  return ruleSelector.includes('::before') || ruleSelector.includes('::after');\r\n}\r\nfunction isPseudoElementSelector(ruleSelector: string) {\r\n  return ruleSelector.includes('::');\r\n}\r\n\r\n/**\r\n * Isolates the TailwindCSS preflight styles inside of the container (assuming all the TailwindCSS is inside of this container)\r\n *\r\n * @param containerSelectors\r\n * @param options\r\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\r\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\r\n * @param options.rootStyles - 'move to container' (default) - moves the root styles to the container styles (by simply replacing the selector), 'add :where' - adds ` :where` to the root selector so styles are still in roots, but only matching items would be affected\r\n *\r\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container (example)\r\n */\r\nexport const isolateInsideOfContainer: SelectorBasedStrategy<{\r\n  except?: string;\r\n  rootStyles?: 'move to container' | 'add :where';\r\n}> = (containerSelectors, options) => {\r\n  const whereNotExcept =\r\n    typeof options?.except === 'string' && options.except\r\n      ? `:where(:not(${options.except},${options.except} *))`\r\n      : '';\r\n\r\n  const selectorsArray = [containerSelectors].flat();\r\n  const whereDirect = `:where(${selectorsArray.join(',')})`;\r\n  const whereWithSubs = `:where(${selectorsArray.map((s) => `${s},${s} *`).join(',')})`;\r\n\r\n  return ({ ruleSelector }) => {\r\n    const handled = optionsHandlerForIgnoreAndRemove(ruleSelector, options);\r\n    if (handled != null) {\r\n      return handled;\r\n    }\r\n\r\n    if (isRootSelector(ruleSelector)) {\r\n      if (options?.rootStyles === 'add :where') {\r\n        return `${ruleSelector}${whereNotExcept} ${whereDirect}`;\r\n      }\r\n      return selectorsArray.map((s) => `${s}${whereNotExcept}`).join(',');\r\n    } else if (isBeforeOrAfter(ruleSelector)) {\r\n      return `${whereWithSubs}${whereNotExcept}${ruleSelector}`;\r\n    } else if (isPseudoElementSelector(ruleSelector)) {\r\n      return `${whereWithSubs}${whereNotExcept} ${ruleSelector}`;\r\n    } else {\r\n      return `${ruleSelector}${whereWithSubs}${whereNotExcept}`;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Isolates the TailwindCSS preflight styles outside of the container (assuming no TailwindCSS inside of it)\r\n * @param containerSelectors\r\n * @param options\r\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\r\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\r\n *\r\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container (example)\r\n */\r\nexport const isolateOutsideOfContainer: SelectorBasedStrategy<{ plus?: string }> = (\r\n  containerSelectors,\r\n  options,\r\n) => {\r\n  const whereNotContainerSelector = `:where(:not(${[containerSelectors]\r\n    .flat()\r\n    .map((s) => `${s},${s} *`)\r\n    .join(',')}))`;\r\n\r\n  const insideOfContainerLogic =\r\n    typeof options?.plus === 'string' && options.plus\r\n      ? isolateInsideOfContainer(options.plus)\r\n      : null;\r\n\r\n  return ({ ruleSelector, ...rest }) => {\r\n    const ignoreOrRemove = optionsHandlerForIgnoreAndRemove(ruleSelector, options);\r\n    if (ignoreOrRemove != null) {\r\n      return ignoreOrRemove;\r\n    }\r\n\r\n    if (isRootSelector(ruleSelector)) {\r\n      return ruleSelector;\r\n    }\r\n\r\n    return [\r\n      isBeforeOrAfter(ruleSelector)\r\n        ? `${whereNotContainerSelector}${ruleSelector}`\r\n        : isPseudoElementSelector(ruleSelector)\r\n          ? `${whereNotContainerSelector} ${ruleSelector}`\r\n          : `${ruleSelector}${whereNotContainerSelector}`,\r\n      insideOfContainerLogic?.({ ruleSelector, ...rest }),\r\n    ]\r\n      .filter(Boolean)\r\n      .join(',');\r\n  };\r\n};\r\n\r\n/**\r\n * @deprecated Use `isolateInsideOfContainer` with rootStyles option set to 'add :where'\r\n * @description Isolates the TailwindCSS preflight styles within the component selector (not inside of the container, but immediately)\r\n * @param componentSelectors\r\n * @param options\r\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\r\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\r\n *\r\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration (example)\r\n */\r\nexport const isolateForComponents: SelectorBasedStrategy = (\r\n  componentSelectors,\r\n  options,\r\n): CSSRuleSelectorTransformer => {\r\n  const componentSelectorsArray = [componentSelectors].flat();\r\n  const whereComponentSelectorsDirect = `:where(${componentSelectorsArray.join(',')})`;\r\n  const whereComponentSelectorsWithSubs = `:where(${componentSelectorsArray\r\n    .map((s) => `${s},${s} *`)\r\n    .join(',')})`;\r\n\r\n  return ({ ruleSelector }) =>\r\n    optionsHandlerForIgnoreAndRemove(ruleSelector, options) ??\r\n    (isRootSelector(ruleSelector)\r\n      ? `${ruleSelector} ${whereComponentSelectorsDirect}`\r\n      : `${ruleSelector}${whereComponentSelectorsWithSubs}`);\r\n};\r\n","import TailwindPlugin from 'tailwindcss/plugin.js';\r\nimport postcss from 'postcss';\r\nimport { type CSSRuleObject } from 'tailwindcss/types/config.js';\r\nimport { readFileSync } from 'fs';\r\n\r\nconst { withOptions } = TailwindPlugin;\r\n\r\ninterface PropsFilterInput {\r\n  selectorSet: Set<string>;\r\n  property: string;\r\n  value: any;\r\n}\r\n\r\nexport type CSSRuleSelectorTransformer = (info: { ruleSelector: string }) => string;\r\n\r\ntype ModifyResult = string | null | undefined;\r\n\r\ntype ModifyStylesHook = (input: PropsFilterInput) => ModifyResult;\r\n\r\ninterface PluginOptions {\r\n  isolationStrategy: CSSRuleSelectorTransformer;\r\n  /** @deprecated prefer using modifyPreflightStyles */\r\n  propsFilter?: (input: PropsFilterInput) => boolean | undefined;\r\n  modifyPreflightStyles?: Record<string, Record<string, ModifyResult>> | ModifyStylesHook;\r\n}\r\n\r\n/**\r\n * TailwindCSS plugin to scope the preflight styles\r\n * @param isolationStrategy - function to transform the preflight CSS selectors,\r\n *  import {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container isolateInsideOfContainer},\r\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container isolateOutsideOfContainer},\r\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration isolateForComponents} or write {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#your-owncustom-isolation-strategy your own}\r\n * @param propsFilter - function to filter the preflight CSS properties and values, return false to remove the property. Any other value (including true and undefined) will leave the prop intact\r\n * @param modifyPreflightStyles - function to modify the preflight CSS properties and their values, return null to remove the property. Any other returned value will be used as a new value for the property. If you don't want to change it - return the old value (provided in argument object as `value`).\r\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight (documentation)\r\n */\r\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\r\n  ({ isolationStrategy, propsFilter, modifyPreflightStyles }) =>\r\n    ({ addBase, corePlugins }) => {\r\n      const baseCssPath = require\r\n        ? require.resolve('tailwindcss/lib/css/preflight.css')\r\n        : import.meta.resolve('tailwindcss/lib/css/preflight.css');\r\n      const baseCssStyles = postcss.parse(readFileSync(baseCssPath, 'utf8'));\r\n\r\n      if (typeof isolationStrategy !== 'function') {\r\n        throw new Error(\r\n          \"TailwindCssScopedPreflightPlugin: isolationStrategy option must be a function - custom one or pre-bundled - import { isolateInsideOfContainer, isolateOutsideOfContainer, isolateForComponents } from 'tailwindcss-scoped-preflight-plugin')\",\r\n        );\r\n      }\r\n\r\n      if (corePlugins('preflight')) {\r\n        throw new Error(\r\n          `TailwindCssScopedPreflightPlugin: TailwindCSS corePlugins.preflight config option must be set to false`,\r\n        );\r\n      }\r\n\r\n      let modifyStylesHook: ModifyStylesHook | undefined;\r\n      if (typeof modifyPreflightStyles === 'function') {\r\n        modifyStylesHook = modifyPreflightStyles;\r\n      } else if (modifyPreflightStyles) {\r\n        const configEntries = Object.entries(modifyPreflightStyles);\r\n        modifyStylesHook = ({ selectorSet, property, value }) => {\r\n          const matchingEntry = configEntries.find(([sel]) => selectorSet.has(sel));\r\n          return matchingEntry?.[1]?.[property];\r\n        };\r\n      }\r\n\r\n      baseCssStyles.walkRules((rule) => {\r\n        if (propsFilter || modifyPreflightStyles) {\r\n          const selectorSet = new Set(rule.selectors);\r\n          rule.nodes = rule.nodes?.map((node) => {\r\n            if (node instanceof postcss.Declaration) {\r\n              const newValue = modifyStylesHook\r\n                ? modifyStylesHook({\r\n                    selectorSet,\r\n                    property: node.prop,\r\n                    value: node.value,\r\n                  })\r\n                : node.value;\r\n\r\n              const filterValue = propsFilter\r\n                ? propsFilter({\r\n                    selectorSet,\r\n                    property: node.prop,\r\n                    value: node.value,\r\n                  })\r\n                : true;\r\n              if (filterValue === false || newValue === null) {\r\n                return postcss.comment({\r\n                  text: node.toString(),\r\n                });\r\n              } else if (typeof newValue !== 'undefined' && newValue !== node.value) {\r\n                node.value = newValue;\r\n              }\r\n            }\r\n            return node;\r\n          });\r\n        }\r\n        rule.selectors = rule.selectors\r\n          .map((s) => isolationStrategy({ ruleSelector: s }))\r\n          .filter((value, index, array) => value && array.indexOf(value) === index);\r\n        rule.selector = rule.selectors.join(',\\n');\r\n        if (!rule.nodes.some((n) => n instanceof postcss.Declaration)) {\r\n          rule.nodes = [];\r\n        }\r\n      });\r\n\r\n      addBase(\r\n        baseCssStyles.nodes.filter((node, i, all) => {\r\n          const next = all[i + 1];\r\n          return node instanceof postcss.Rule\r\n            ? node.nodes.length > 0 && node.selector\r\n            : node instanceof postcss.Comment\r\n              ? next instanceof postcss.Rule && next.selector && next.nodes.length > 0\r\n              : true;\r\n        }) as unknown as CSSRuleObject[],\r\n      );\r\n    },\r\n  () => ({\r\n    corePlugins: {\r\n      preflight: false,\r\n    },\r\n  }),\r\n);\r\n\r\nexport * from './strategies';\r\n"],"names":["optionsHandlerForIgnoreAndRemove","selector","ignore","remove","some","s","includes","roots","Set","isRootSelector","has","isBeforeOrAfter","ruleSelector","isPseudoElementSelector","isolateInsideOfContainer","containerSelectors","options","whereNotExcept","except","selectorsArray","flat","whereDirect","join","whereWithSubs","map","handled","rootStyles","isolateOutsideOfContainer","whereNotContainerSelector","insideOfContainerLogic","plus","_ref","rest","_objectWithoutPropertiesLoose","_excluded","ignoreOrRemove","_extends","filter","Boolean","isolateForComponents","componentSelectors","componentSelectorsArray","whereComponentSelectorsDirect","whereComponentSelectorsWithSubs","_optionsHandlerForIgn","withOptions","TailwindPlugin","scopedPreflightStyles","isolationStrategy","propsFilter","modifyPreflightStyles","addBase","corePlugins","baseCssPath","require","resolve","import","meta","baseCssStyles","postcss","parse","readFileSync","Error","modifyStylesHook","configEntries","Object","entries","selectorSet","property","value","_matchingEntry$","matchingEntry","find","sel","walkRules","rule","_rule$nodes","selectors","nodes","node","Declaration","newValue","prop","filterValue","comment","text","toString","index","array","indexOf","n","i","all","next","Rule","length","Comment","preflight"],"mappings":"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"}