{"version":3,"file":"plugin.modern.mjs","sources":["../src/strategies.ts","../src/index.ts"],"sourcesContent":["import { type CSSRuleSelectorTransformer } from './index';\n\ninterface Options {\n  ignore?: string[];\n  remove?: string[];\n}\n\ntype SelectorBasedStrategy<ExtraOptions = unknown> = (\n  selectors: string | string[],\n  options?: Options & ExtraOptions,\n) => CSSRuleSelectorTransformer;\n\nconst optionsHandlerForIgnoreAndRemove = (\n  selector: string,\n  { ignore, remove }: Options = {},\n): string | null => {\n  if (remove?.some((s) => selector.includes(s)) === true) {\n    return '';\n  }\n  if (ignore?.some((s) => selector.includes(s)) === true) {\n    return selector;\n  }\n  return null;\n};\n\nconst roots = new Set([\n  'html',\n  'body',\n  ':host',\n]);\n\n/**\n * Isolates the TailwindCSS preflight styles inside of the container (assuming all the TailwindCSS is inside of this container)\n *\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container (example)\n */\nexport const isolateInsideOfContainer: SelectorBasedStrategy<{ except?: string }> = (\n  containerSelectors,\n  options,\n) => {\n  const whereNotExcept =\n    typeof options?.except === 'string' && options.except\n      ? `:where(:not(${options.except},${options.except} *))`\n      : '';\n  return ({ ruleSelector }) =>\n    optionsHandlerForIgnoreAndRemove(ruleSelector, options) ??\n    (roots.has(ruleSelector)\n      ? [containerSelectors]\n          .flat()\n          .map((cont) => `${cont}${whereNotExcept}`)\n          .join(',')\n      : [containerSelectors]\n          .flat()\n          .map((s) => `${ruleSelector}:where(${s},${s} *)${whereNotExcept}`)\n          .join(','));\n};\n\n/**\n * Isolates the TailwindCSS preflight styles outside of the container (assuming no TailwindCSS inside of it)\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container (example)\n */\nexport const isolateOutsideOfContainer: SelectorBasedStrategy<{ plus?: string }> = (\n  containerSelectors,\n  options,\n) => {\n  const whereNotContainerSelector = `:where(:not(${[containerSelectors]\n    .flat()\n    .map((s) => `${s},${s} *`)\n    .join(',')}))`;\n\n  const insideOfContainerLogic =\n    typeof options?.plus === 'string' && options.plus\n      ? isolateInsideOfContainer(options.plus)\n      : null;\n\n  return ({ ruleSelector }) => {\n    const ignoreOrRemove = optionsHandlerForIgnoreAndRemove(ruleSelector, options);\n    if (ignoreOrRemove != null) {\n      return ignoreOrRemove;\n    }\n\n    if (roots.has(ruleSelector)) {\n      return ruleSelector;\n    }\n\n    return [\n      `${ruleSelector}${whereNotContainerSelector}`,\n      insideOfContainerLogic?.({ ruleSelector }),\n    ]\n      .filter(Boolean)\n      .join(',');\n  };\n};\n\n/**\n * Isolates the TailwindCSS preflight styles within the component selector (not inside of the container, but immediately)\n * @param componentSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration (example)\n */\nexport const isolateForComponents: SelectorBasedStrategy = (\n  componentSelectors,\n  options,\n): CSSRuleSelectorTransformer => {\n  const componentSelectorsArray = [componentSelectors].flat();\n  const whereComponentSelectorsDirect = `:where(${componentSelectorsArray.join(',')})`;\n  const whereComponentSelectorsWithSubs = `:where(${componentSelectorsArray\n    .map((s) => `${s},${s} *`)\n    .join(',')})`;\n\n  return ({ ruleSelector }) =>\n    optionsHandlerForIgnoreAndRemove(ruleSelector, options) ??\n    (roots.has(ruleSelector)\n      ? `${ruleSelector} ${whereComponentSelectorsDirect}`\n      : `${ruleSelector}${whereComponentSelectorsWithSubs}`);\n};\n","import { withOptions } from 'tailwindcss/plugin.js';\nimport postcss from 'postcss';\nimport { type CSSRuleObject } from 'tailwindcss/types/config.js';\nimport { readFileSync } from 'fs';\n\ninterface PropsFilterInput {\n  selectorSet: Set<string>;\n  property: string;\n  value: any;\n}\n\nexport type CSSRuleSelectorTransformer = (info: { ruleSelector: string }) => string;\n\ntype ModifyResult = string | null | undefined;\n\ntype ModifyStylesHook = (input: PropsFilterInput) => ModifyResult;\n\ninterface PluginOptions {\n  isolationStrategy: CSSRuleSelectorTransformer;\n  /** @deprecated prefer using modifyPreflightStyles */\n  propsFilter?: (input: PropsFilterInput) => boolean | undefined;\n  modifyPreflightStyles?: Record<string, Record<string, ModifyResult>> | ModifyStylesHook;\n}\n\n/**\n * TailwindCSS plugin to scope the preflight styles\n * @param isolationStrategy - function to transform the preflight CSS selectors,\n *  import {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container isolateInsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container isolateOutsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration isolateForComponents} or write {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#your-owncustom-isolation-strategy your own}\n * @param propsFilter - function to filter the preflight CSS properties and values, return false to remove the property. Any other value (including true and undefined) will leave the prop intact\n * @param modifyPreflightStyles - function to modify the preflight CSS properties and their values, return null to remove the property. Any other returned value will be used as a new value for the property. If you don't want to change it - return the old value (provided in argument object as `value`).\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight (documentation)\n */\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\n  ({ isolationStrategy, propsFilter, modifyPreflightStyles }) =>\n    ({ addBase, corePlugins }) => {\n      const baseCssPath = require.resolve('tailwindcss/lib/css/preflight.css');\n      const baseCssStyles = postcss.parse(readFileSync(baseCssPath, 'utf8'));\n\n      if (typeof isolationStrategy !== 'function') {\n        throw new Error(\n          \"TailwindCssScopedPreflightPlugin: isolationStrategy option must be a function - custom one or pre-bundled - import { isolateInsideOfContainer, isolateOutsideOfContainer, isolateForComponents } from 'tailwindcss-scoped-preflight-plugin')\",\n        );\n      }\n\n      if (corePlugins('preflight')) {\n        throw new Error(\n          `TailwindCssScopedPreflightPlugin: TailwindCSS corePlugins.preflight config option must be set to false`,\n        );\n      }\n\n      let modifyStylesHook: ModifyStylesHook | undefined;\n      if (typeof modifyPreflightStyles === 'function') {\n        modifyStylesHook = modifyPreflightStyles;\n      } else if (modifyPreflightStyles) {\n        const configEntries = Object.entries(modifyPreflightStyles);\n        modifyStylesHook = ({ selectorSet, property, value }) => {\n          const matchingEntry = configEntries.find(([sel]) => selectorSet.has(sel));\n          return matchingEntry?.[1]?.[property];\n        };\n      }\n\n      baseCssStyles.walkRules((rule) => {\n        if (propsFilter || modifyPreflightStyles) {\n          const selectorSet = new Set(rule.selectors);\n          rule.nodes = rule.nodes?.map((node) => {\n            if (node instanceof postcss.Declaration) {\n              const newValue = modifyStylesHook\n                ? modifyStylesHook({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : node.value;\n\n              const filterValue = propsFilter\n                ? propsFilter({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : true;\n              if (filterValue === false || newValue === null) {\n                return postcss.comment({\n                  text: node.toString(),\n                });\n              } else if (typeof newValue !== 'undefined' && newValue !== node.value) {\n                node.value = newValue;\n              }\n            }\n            return node;\n          });\n        }\n        rule.selectors = rule.selectors\n          .map((s) => isolationStrategy({ ruleSelector: s }))\n          .filter((value, index, array) => value && array.indexOf(value) === index);\n        rule.selector = rule.selectors.join(',\\n');\n        if (!rule.nodes.some((n) => n instanceof postcss.Declaration)) {\n          rule.nodes = [];\n        }\n      });\n\n      addBase(\n        baseCssStyles.nodes.filter((node, i, all) => {\n          const next = all[i + 1];\n          return node instanceof postcss.Rule\n            ? node.nodes.length > 0 && node.selector\n            : node instanceof postcss.Comment\n              ? next instanceof postcss.Rule && next.selector && next.nodes.length > 0\n              : true;\n        }) as unknown as CSSRuleObject[],\n      );\n    },\n  () => ({\n    corePlugins: {\n      preflight: false,\n    },\n  }),\n);\n\nexport * from './strategies';\n"],"names":["optionsHandlerForIgnoreAndRemove","selector","ignore","remove","some","s","includes","roots","Set","isolateInsideOfContainer","containerSelectors","options","whereNotExcept","except","ruleSelector","_optionsHandlerForIgn","has","flat","map","cont","join","isolateOutsideOfContainer","whereNotContainerSelector","insideOfContainerLogic","plus","ignoreOrRemove","filter","Boolean","isolateForComponents","componentSelectors","componentSelectorsArray","whereComponentSelectorsDirect","whereComponentSelectorsWithSubs","_optionsHandlerForIgn2","scopedPreflightStyles","withOptions","isolationStrategy","propsFilter","modifyPreflightStyles","addBase","corePlugins","baseCssPath","require","resolve","baseCssStyles","postcss","parse","readFileSync","Error","modifyStylesHook","configEntries","Object","entries","selectorSet","property","value","_matchingEntry$","matchingEntry","find","sel","walkRules","rule","_rule$nodes","selectors","nodes","node","Declaration","newValue","prop","filterValue","comment","text","toString","index","array","indexOf","n","i","all","next","Rule","length","Comment","preflight"],"mappings":"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"}