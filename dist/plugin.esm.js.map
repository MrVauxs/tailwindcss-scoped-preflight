{"version":3,"file":"plugin.esm.js","sources":["../src/strategies.ts","../src/index.ts"],"sourcesContent":["import { type CSSRuleSelectorTransformer } from './index.js';\n\ninterface Options {\n  ignore?: string[];\n  remove?: string[];\n}\n\ntype SelectorBasedStrategy = (\n  selectors: string | string[],\n  options?: Options,\n) => CSSRuleSelectorTransformer;\n\nconst defaultHandler = (selector: string, { ignore, remove }: Options = {}): string | null => {\n  if (remove?.some((s) => selector.includes(s)) === true) {\n    return '';\n  }\n  if (ignore?.some((s) => selector.includes(s)) === true) {\n    return selector;\n  }\n  return null;\n};\n\n/**\n * Isolates the TailwindCSS preflight styles inside of the container (assuming all the TailwindCSS is inside of this container)\n *\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container (example)\n */\nexport const isolateInsideOfContainer: SelectorBasedStrategy =\n  (containerSelectors, options) =>\n  ({ ruleSelector }) =>\n    defaultHandler(ruleSelector, options) ??\n    ([\n      'html',\n      'body',\n      ':host',\n    ].includes(ruleSelector)\n      ? [containerSelectors].flat().join(',')\n      : [containerSelectors]\n          .flat()\n          .map((s) => `${ruleSelector}:where(${s},${s} *)`)\n          .join(','));\n\n/**\n * Isolates the TailwindCSS preflight styles outside of the container (assuming no TailwindCSS inside of it)\n * @param containerSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container (example)\n */\nexport const isolateOutsideOfContainer: SelectorBasedStrategy =\n  (containerSelectors, options) =>\n  ({ ruleSelector }) =>\n    defaultHandler(ruleSelector, options) ??\n    ([\n      'html',\n      'body',\n      ':host',\n    ].includes(ruleSelector)\n      ? ruleSelector\n      : `${ruleSelector}:where(:not(${[containerSelectors]\n          .flat()\n          .map((s) => `${s},${s} *`)\n          .join(',')}))`);\n\n/**\n * Isolates the TailwindCSS preflight styles within the component selector (not inside of the container, but immediately)\n * @param componentSelectors\n * @param options\n * @param options.ignore - list of preflight CSS selectors to ignore (don't isolate) - these will not be affected by the transformation\n * @param options.remove - list of preflight CSS selectors to remove from the final CSS - use it if you have any specific conflicts and really want to remove some preflight rules\n *\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration (example)\n */\nexport const isolateForComponents: SelectorBasedStrategy =\n  (componentSelectors, options): CSSRuleSelectorTransformer =>\n  ({ ruleSelector }) =>\n    defaultHandler(ruleSelector, options) ??\n    ([\n      'html',\n      'body',\n      ':host',\n    ].includes(ruleSelector)\n      ? `${ruleSelector} :where(${[componentSelectors].flat().join(',')})`\n      : `${ruleSelector}:where(${[componentSelectors]\n          .flat()\n          .map((s) => `${s},${s} *`)\n          .join(',')})`);\n","import { withOptions } from 'tailwindcss/plugin.js';\nimport postcss from 'postcss';\nimport { type CSSRuleObject } from 'tailwindcss/types/config.js';\nimport { readFileSync } from 'fs';\n\ninterface PropsFilterInput {\n  selectorSet: Set<string>;\n  property: string;\n  value: any;\n}\n\nexport type CSSRuleSelectorTransformer = (info: { ruleSelector: string }) => string;\n\ntype ModifyResult = string | null | undefined;\n\ntype ModifyStylesHook = (input: PropsFilterInput) => ModifyResult;\n\ninterface PluginOptions {\n  isolationStrategy: CSSRuleSelectorTransformer;\n  /** @deprecated prefer using modifyPreflightStyles */\n  propsFilter?: (input: PropsFilterInput) => boolean | undefined;\n  modifyPreflightStyles?: Record<string, Record<string, ModifyResult>> | ModifyStylesHook;\n}\n\n/**\n * TailwindCSS plugin to scope the preflight styles\n * @param isolationStrategy - function to transform the preflight CSS selectors,\n *  import {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-inside-of-container isolateInsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#isolate-outside-of-container isolateOutsideOfContainer},\n *  {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#update-your-tailwind-css-configuration isolateForComponents} or write {@link https://www.npmjs.com/package/tailwindcss-scoped-preflight#your-owncustom-isolation-strategy your own}\n * @deprecated prefer using modifyPreflightStyles\n * @param propsFilter - function to filter the preflight CSS properties and values, return false to remove the property. Any other value (including true and undefined) will leave the prop intact\n * @param modifyPreflightStyles - function to modify the preflight CSS properties and their values, return null to remove the property. Any other returned value will be used as a new value for the property. If you don't want to change it - return the old value (provided in argument object as `value`).\n * @link https://www.npmjs.com/package/tailwindcss-scoped-preflight (documentation)\n */\nexport const scopedPreflightStyles = withOptions<PluginOptions>(\n  ({ isolationStrategy, propsFilter, modifyPreflightStyles }) =>\n    ({ addBase, corePlugins }) => {\n      const baseCssPath = require.resolve('tailwindcss/lib/css/preflight.css');\n      const baseCssStyles = postcss.parse(readFileSync(baseCssPath, 'utf8'));\n\n      if (typeof isolationStrategy !== 'function') {\n        throw new Error(\n          \"TailwindCssScopedPreflightPlugin: isolationStrategy option must be a function - custom one or pre-bundled - import { isolateInsideOfContainer, isolateOutsideOfContainer, isolateForComponents } from 'tailwindcss-scoped-preflight-plugin')\",\n        );\n      }\n\n      if (corePlugins('preflight')) {\n        throw new Error(\n          `TailwindCssScopedPreflightPlugin: TailwindCSS corePlugins.preflight config option must be set to false`,\n        );\n      }\n\n      let modifyStylesHook: ModifyStylesHook | undefined;\n      if (typeof modifyPreflightStyles === 'function') {\n        modifyStylesHook = modifyPreflightStyles;\n      } else if (modifyPreflightStyles) {\n        const configEntries = Object.entries(modifyPreflightStyles);\n        modifyStylesHook = ({ selectorSet, property, value }) => {\n          const matchingEntry = configEntries.find(([sel]) => selectorSet.has(sel));\n          return matchingEntry?.[1]?.[property];\n        };\n      }\n\n      baseCssStyles.walkRules((rule) => {\n        if (propsFilter || modifyPreflightStyles) {\n          const selectorSet = new Set(rule.selectors);\n          rule.nodes = rule.nodes?.map((node) => {\n            if (node instanceof postcss.Declaration) {\n              const newValue = modifyStylesHook\n                ? modifyStylesHook({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : node.value;\n\n              const filterValue = propsFilter\n                ? propsFilter({\n                    selectorSet,\n                    property: node.prop,\n                    value: node.value,\n                  })\n                : true;\n              if (filterValue === false || newValue === null) {\n                return postcss.comment({\n                  text: node.toString(),\n                });\n              } else if (typeof newValue !== 'undefined' && newValue !== node.value) {\n                node.value = newValue;\n              }\n            }\n            return node;\n          });\n        }\n        rule.selectors = rule.selectors\n          .map((s) => isolationStrategy({ ruleSelector: s }))\n          .filter((value, index, array) => value && array.indexOf(value) === index);\n        rule.selector = rule.selectors.join(',\\n');\n        if (!rule.nodes.some((n) => n instanceof postcss.Declaration)) {\n          rule.nodes = [];\n        }\n      });\n\n      addBase(\n        baseCssStyles.nodes.filter((node, i, all) => {\n          const next = all[i + 1];\n          return node instanceof postcss.Rule\n            ? node.nodes.length > 0 && node.selector\n            : node instanceof postcss.Comment\n              ? next instanceof postcss.Rule && next.selector && next.nodes.length > 0\n              : true;\n        }) as unknown as CSSRuleObject[],\n      );\n    },\n  () => ({\n    corePlugins: {\n      preflight: false,\n    },\n  }),\n);\n\nexport * from './strategies.js';\n"],"names":["defaultHandler","selector","ignore","remove","some","s","includes","isolateInsideOfContainer","containerSelectors","options","ruleSelector","_defaultHandler","flat","join","map","isolateOutsideOfContainer","_defaultHandler2","isolateForComponents","componentSelectors","_defaultHandler3","scopedPreflightStyles","withOptions","isolationStrategy","propsFilter","modifyPreflightStyles","addBase","corePlugins","baseCssPath","require","resolve","baseCssStyles","postcss","parse","readFileSync","Error","modifyStylesHook","configEntries","Object","entries","selectorSet","property","value","_matchingEntry$","matchingEntry","find","sel","has","walkRules","rule","_rule$nodes","Set","selectors","nodes","node","Declaration","newValue","prop","filterValue","comment","text","toString","filter","index","array","indexOf","n","i","all","next","Rule","length","Comment","preflight"],"mappings":"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"}